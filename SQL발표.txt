GROUP BY란 ?
- 같은 값을 가진 행을 그룹 짓는 SQL 명령어입니다
- GROUP BY는 COUNT(), MAX(), MIN(), SUM(), AVG() 등 집계 함수와 함께 사용되며
- FROM절과 WHERE절 뒤에 위치합니다

==============================================================================================

여기서 집계함수는
칼럼의
SUM		합
COUNT > COUNT(*), COUNT(EXPR), COUNT(DISTINCT EXPR) 개수
AVG		평균
MIN		최소값
MAX		최대값
STDDEV		표준편차
VARIANCE 	분산

등이 있습니다

* 집계 함수 사용 시 주의 사항이 있습니다
 - 반드시 하나의 값만을 반환합니다
 - NULL 값은 무시됩니다 > 계산되지 않습니다 > 이걸 막으려면
 - NULL 값이 무시되지 않으려면 NVL, NVL2와 같은 함수를 이용한다. 
 - GROUP BY 설정 없이 일반 컬럼과 기술될 수 없다.

예를들면 어떤 칼럼으로 그룹화할지 정하지 않았는데 집계함수를 사용할 수는 없습니다
어떤 것 기준으로 집계를 할지 모르기 때문입니다

==============================================================================================
GROUP BY 주의 사항
 - SELECT 문에 있는 모든 열은 집계 함수가 되거나 GROUP BY 절에 나타나야 합니다.
GROUP BY 절을 사용하는데 만약 SELECT 문에 집계 함수를 사용하지 않거나 GROUP BY 절에 언급되지 않은 열이 존재한다면 오류가 발생한다.
예를 들면 어떤 학급이 있는데 "과목별 평균을 알고싶어"라고 했다고 칩시다
그럼 이때 과목별 학생의 PK번호를 알 수 있나요?
> 알 수 없습니다
단 과목별 학생들의 번호 합이나, 개수 등은 알 수 있습니다
데이터 그룹화를 했는데 정확히 지정할 수 없는 의미 모르는 데이터를 요구한 것이기 때문에 오류가 나게 됩니다

 - GROUP BY가 SELECT 보다 먼저 실행 되지만, SELECT의 AS를 사용할 수 있다. (단, 표준 SQL에서는 지원하지 않음.)
> SELECT 절은 무엇을 보여줄지 정하는 것!이기 때문에 그룹화를 그 전에 해야합니다

    GROUP BY, HAVING, ORDER BY에서 SELECT의 AS를 사용할 수 있다.
    WHERE절에서는 SELECT의 AS를 사용할 수 없다. 실제 컬럼명만 사용 가능하다. (간접적인 방법으론 서브 쿼리가 있음.)

그룹화를 하면 당연히도 중복 사라집니다
그래서 이러한 면이 데이터를 집약하는 기능이 있다 라고 볼 수 있고
이는 DISTINCT와 유사하다고 볼 수 있습니다

==============================================================================================
HAVING이란 ?
 - SELECT 문에서 집계 함수로 집계된 자료를 다시 한번 조건을 걸어 필터링 하기 위한 명령어입니다
 - HAVING 절은 WHERE절과 기능이 동일합니다
단 조건 내용에 집계 함수를 포함하는 것만을 포함합니다
일반 조건은 WHERE절에 기술하지만 집계 함수를 포함한 조건은 HAVING 절에 기술한다.


==============================================================================================
이제 한번 실습하면서 보여드리겠습니다
----------------------------------------------------------------------------------------------------------------------------------------------------------
급여 테이블
사번 사원이름 부서 직급 연봉 입사일

CREATE TABLE EMP (
	NUM INT PRIMARY KEY AUTO_INCREMENT,
	NAME VARCHAR(15) NOT NULL,
	DEPT VARCHAR(15),
	JOB VARCHAR(15),
	SAL INT DEFAULT 0,
	HIRE_DATE DATE
);
----------------------------------------------------------------------------------------------------------------------------------------------------------
INSERT INTO EMP (NAME, DEPT, JOB, SAL, HIRE_DATE) VALUES('홍길동', '영업', '부장', 5000, '2018-02-03');

INSERT INTO EMP (NAME, DEPT, JOB, SAL, HIRE_DATE) VALUES('철수', '영업', '팀장', 5200, '2017-04-01');

INSERT INTO EMP (NAME, DEPT, JOB, SAL, HIRE_DATE) VALUES('영희', '기획', '사원', 3000, '2022-01-17');

INSERT INTO EMP (NAME, DEPT, JOB, SAL, HIRE_DATE) VALUES('아리', '인사', '사원', 3200, '2023-01-24');

INSERT INTO EMP (NAME, JOB, SAL, HIRE_DATE) VALUES('티모', '사원', 3600, '2021-06-13');

INSERT INTO EMP (NAME, DEPT, JOB, SAL, HIRE_DATE) VALUES('모르가나', '회계', '부장', 5800, '2016-08-12');

INSERT INTO EMP (NAME, DEPT, JOB, SAL, HIRE_DATE) VALUES('유미', '인사', '팀장', 5300, '2018-02-03');

INSERT INTO EMP (NAME, DEPT, JOB, SAL, HIRE_DATE) VALUES('에코', '인사', '사원', 3500, '2019-11-12');

INSERT INTO EMP (NAME, DEPT, JOB, SAL, HIRE_DATE) VALUES('진', '회계', '팀장', 5000, '2018-04-25');

INSERT INTO EMP (NAME, DEPT, JOB, SAL) VALUES('오리아나', '회계', '사원', 800);

-----------------------------------------------------------------------------------------------------------------------------------------
먼저 가장 기본적인 형태로 보여드리겠습니다

//  급여 테이블에서 부서별로 그룹화해서 "부서"하고 "부서별 평균연봉" 보여줘
SELECT DEPT, AVG(SAL) AS '부서별 평균 연봉'
FROM EMP
GROUP BY DEPT;

HAVING 절 추가 해보겠습니다
똑같이 
급여 테이블에서 부서별로 그룹화해서 "부서"하고 "부서별 평균연봉" 보여줘
하는데

// 평균 연봉이 4000이상인 부서만 보여줄래?
SELECT DEPT, AVG(SAL) AS '부서별 평균 연봉'
FROM EMP
GROUP BY DEPT
HAVING AVG(SAL) >= 4000;

// 급여 테이블에서 부서별로 그룹화해서 "부서"하고 "부서별 최고연봉" 보여줘
// 근데 만약 그 부서에 한명만 있으면 최대연봉이라고 하기 그러니까
// 한명인 부서는 제외해줘
// 그리고 연봉 많은 순으로 보여줘

SELECT DEPT, MAX(SAL)
FROM EMP
GROUP BY DEPT
HAVING COUNT(NUM) > 1
ORDER BY MAX(SAL) DESC;

그러면 하나만 더 해보겠습니다
아까 집약기능, 중복제거가 DISTINCT와 비슷하다고 했는데

SELECT DISTINCT DEPT, JOB
FROM EMP;

SELECT DEPT, JOB
FROM EMP
GROUP BY DEPT, JOB;

이 둘의 쿼리 결과가 같은 것을 알 수 있습니다


===============================================================================
문자열 함수
문자열 함수가 매우 많아서 많이 쓸 거 같은 것 위주로 가져왔습니다

문자열 자르기
SUBSTRING

지정한 범위의 문자열을 반환할 때 사용
SELECT 'My! Sql', SUBSTRING('My! Sql', 5, 2);

문자열 합치기
CONCAT(STR1, STR2)

소문자/대문자 변환
LOWER
UPPER

SELECT 'My Sql', LOWER('My Sql'), UPPER('My Sql');

문자열 공백 제거
LTRIM
RTRIM
TRIM
SELECT 
'  My Sql  ', LTRIM('  My Sql  '), RTRIM('  My Sql  '), TRIM('  My Sql  ');

문자열 채우기
LPAD
RPAD

문자열 교체
REPLACE
SELECT REPLACE(NUM, '1', '2');

- LEN 함수
문자열의 문자 개수를 반환할 떄 사용(문자열 뒤의 공백은 포함하지 않음)
SELECT LEN('abcd efg   ');

- STR 함수
숫자를 문자열로 변환할 때 사용
SELECT STR(123.45, 6, 1);




-----------------------------------------------------------------------------------------------------------------------------------------
문자열 함수는 보여드리면서 설명 드리겠습니다

// 부서명과 직급을 합쳐서 '정보' 칼럼으로 출력
SELECT CONCAT(DEPT, ' ', JOB) AS '정보', SAL
FROM EMP;

// 입사일 데이터에 하이픈(-)이 들어가 있는데 이를 콜론(:)으로 바꿔보겠습니다
SELECT NUM, NAME, REPLACE(HIRE_DATE, '-', '_') AS '날짜'
FROM EMP;

// 자리수가 안 맞는 칼럼인 SAL에서 4자리수로 한번 맞춰서 출력해보겠습니다
SELECT LPAD(SAL, 4, 0) AS SAL
FROM EMP;





















